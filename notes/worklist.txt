
Cedar WorkList

DONE: 
----
fix: label of selectVar is incorrect (Shiny)

fix: when removing group, glow filter stays on (remove glow filter with group selection and rely on edge color)  (HTMLWidget)

feature: ability to select a category from a categorical variable for coloring

feature: color nodes by categorical var (Shiny)

feature: use glow filter to indicate 'stuck' (increase glow) (HTMLWidget)

fix: first mapper has correct edge widths, next runMappers don't (HTMLWidget)
    problem is that the 'scale' used to calculate edge widths is based on is not reset

fix: stop warning messages  (Shiny)
    Warning in mean.default(nodedata(gm, node, selectedVariable)) :
      argument is not numeric or logical: returning NA
 

TODO
---

fix: remove 1 node from group removes all (HTMLWidget)

fix: node selection; click selected node, unselects all the others unless shift (HTMLWidget)

fix: provide default values or proper error messages for lenses (Shiny)

fix: zoom level persists when mapper recalculated and first drawn, but when zoom start, reset to zero scale, so jumps

fix: when zoomed out, sometimes graph canvas is small and can't be clicked on to move graph
	sometimes corner still not covered when rotating/dragging/zooming 
	when zooming determine if canvas size covers viewport extent 

Mapper Issue

fix: review equalization (Mapper)

fix: node sizes incorrect ( Mapper Partitioning ) 

fix: nodes that don't appear selected (after group select, clear, etc) still move together as if selected sometimes but not always (HTMLWidget)

fix: when click 'show selected' if nothing selected then error message.   Fix by using sparklines

fix: can't tell when nodes are lasso selected when they are small - add yellow inside lasso

feature: increase graph repulsion

fix: when holding down shift key while moving off viz, lifting shift key, viz does not change states
    state change only when keyUp event = shift key, but misses keyUp event
    onFocus event should trigger 'unshift'

feature: color nodes by lense value (e.g. density)    

feature: fix nodes can be made too small deal with minimum node size (HTMLWidget)


fix: glow used for fixed indication not apparent on white nodes, use different color scale (HTMLWidget)
feature: sparkline/histograms for selected nodes for selectedVar (Shiny)
feature: save Mapper button (Shiny)
feature: load Mapper (R, Shiny); loads previous state of a mapper analytis eg lenses and parameters and graph config
feature: add 'help' menu item
future: add clustering visualizations to application
future: better data vis on front page: scatter plot an x/y selection (but restrict so x<>y)
    optional data table for searching

future: re-arrange UI: consider navBarPage instead of dashboard
     https://shiny.rstudio.com/reference/shiny/latest/navbarPage.html 
     and use shiny themse https://rstudio.github.io/shinythemes/, http://bootswatch.com/superhero    
    move data menu items to navbar drop down menu Data^
    

future: Rstudio add-in "run Cedar "  see https://github.com/radiant-rstats/radiant/blob/master/inst/rstudio/addins.dcf



look into this application for code to steal: http://vnijs.github.io/radiant/  and https://github.com/Robinlovelace/R-for-Big-Data

Export an analysis to Rmarkdown - see http://vnijs.github.io/radiant/programming.html



color range : http://bl.ocks.org/nbremer/5cd07f2cb4ad202a9facfbd5d2bc842e

var prismColors = ["#2c7bb6", "#00a6ca","#00ccbc","#90eb9d","#ffff8c","#f9d057","#f29e2e","#e76818","#d7191c"];
var prismColorRange = d3.range(0, 1, 1.0 / (prismColors.length - 1));
prismColorRange.push(1);
		   
//Create color gradient
var prismColorScale = d3.scale.linear()
	.domain(prismColorRange )
	.range(prismColors)
	.interpolate(d3.interpolateHcl);

//Needed to map the values of the dataset to the color scale
var prismColorInterpolate = d3.scale.linear()
	.domain(d3.extent(graph.node.values)) # ?
	.range([0,1]);


	//Fill the legend rectangle
	svg.select(".legendRect")
		.style("fill", "url(#gradient-rainbow-colors)");



//Transition the colors to a rainbow
function setFillColor() {
	// see nodegraph for this code but 
	nodes / select
		.style("fill", function (d,i) { return prismColorScale(prismColorInterpolate(nodeValue[i])); })
}//updateRainbow


// bonus: legend
var legendWidth = width * 0.6,
	legendHeight = 10;

//Color Legend container
var legendsvg = svg.append("g")
	.attr("class", "legendWrapper")
	.attr("transform", "translate(" + (width/2 - 10) + "," + (height+50) + ")");

//Draw the Rectangle
legendsvg.append("rect")
	.attr("class", "legendRect")
	.attr("x", -legendWidth/2)
	.attr("y", 10)
	//.attr("rx", legendHeight/2)
	.attr("width", legendWidth)
	.attr("height", legendHeight)
	.style("fill", "none");
	
//Append title
legendsvg.append("text")
	.attr("class", "legendTitle")
	.attr("x", 0)
	.attr("y", -2)
	.text("Store Competition Index");

//Set scale for x-axis
var xScale = d3.scale.linear()
	 .range([0, legendWidth])
	 .domain([0,100]);
	 //.domain([d3.min(pt.legendSOM.colorData)/100, d3.max(pt.legendSOM.colorData)/100]);

//Define x-axis
var xAxis = d3.svg.axis()
	  .orient("bottom")
	  .ticks(5)  //Set rough # of ticks
	  //.tickFormat(formatPercent)
	  .scale(xScale);

//Set up X axis
legendsvg.append("g")
	.attr("class", "axis")  //Assign "axis" class
	.attr("transform", "translate(" + (-legendWidth/2) + "," + (10 + legendHeight) + ")")
	.call(xAxis);


Understand Clustering
---

add clustering visualizations to application
    

Save/Load data

look into this application for code to steal: http://vnijs.github.io/radiant/  and https://github.com/Robinlovelace/R-for-Big-Data

Export an analysis to Rmarkdown - see http://vnijs.github.io/radiant/programming.html






